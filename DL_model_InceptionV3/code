import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# Define a function for training the model
def train_model(batch_size, optimizer):
    # Data preprocessing (no rescaling or data augmentation)
    train_datagen = ImageDataGenerator()
    test_datagen = ImageDataGenerator()

    train_generator = train_datagen.flow_from_directory(
        r'D:\ishita\building_data\train',
        target_size=(150, 150),  # Inception model input size
        batch_size=batch_size,
        class_mode='binary'  # For binary classification
    )

    test_generator = test_datagen.flow_from_directory(
        r'D:\ishita\building_data\test',
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='binary'
    )

    # Build and compile the Inception model
    base_model = InceptionV3(weights='imagenet', include_top=False)

    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(128, activation='relu')(x)
    predictions = Dense(1, activation='sigmoid')(x)

    model = Model(inputs=base_model.input, outputs=predictions)

    model.compile(optimizer=optimizer,
                  loss='binary_crossentropy',
                  metrics=['accuracy'])

    # Train the model
    epochs = 100

    history = model.fit(
        train_generator,
        steps_per_epoch=len(train_generator),
        epochs=epochs,
        validation_data=test_generator,
        validation_steps=len(test_generator)
    )

    # Evaluate the model on test data
    test_loss, test_accuracy = model.evaluate(test_generator)
    print(f"Test loss: {test_loss:.4f}")
    print(f"Test accuracy: {test_accuracy:.4f}")

    # Evaluate the model on train data
    train_loss, train_accuracy = model.evaluate(train_generator)
    print(f"Train loss: {train_loss:.4f}")
    print(f"Train accuracy: {train_accuracy:.4f}")

    # Save the trained model for future use
    model.save(f'D:\ishita\models\inception_model_batch{batch_size}_optimizer_{optimizer}.h5')

# Specify a range of batch sizes and optimizers
batch_sizes = [16, 32, 64]
optimizers = ['adam', 'sgd', 'rmsprop','adagrade','adadelta','nag']

# Track the best accuracy and corresponding parameters
best_accuracy = 0.0
best_batch_size = 0
best_optimizer = ''

# Iterate through batch sizes and optimizers
for batch_size in batch_sizes:
    for optimizer in optimizers:
        print(f"Training with batch size {batch_size} and optimizer {optimizer}")
        train_model(batch_size, optimizer)
        
        # Update best accuracy and parameters if necessary
        if test_accuracy > best_accuracy:
            best_accuracy = test_accuracy
            best_batch_size = batch_size
            best_optimizer = optimizer

print(f"Best accuracy: {best_accuracy:.4f}")
print(f"Best batch size: {best_batch_size}")
print(f"Best optimizer: {best_optimizer}")



import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# Define a function for training the model
def train_model(batch_size, optimizer):
    # Data preprocessing (no rescaling or data augmentation)
    train_datagen = ImageDataGenerator()
    test_datagen = ImageDataGenerator()

    train_generator = train_datagen.flow_from_directory(
        r'D:\ishita\building_data\train',
        target_size=(150, 150),  # Inception model input size
        batch_size=batch_size,
        class_mode='binary'  # For binary classification
    )

    test_generator = test_datagen.flow_from_directory(
        r'D:\ishita\building_data\test',
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='binary'
    )

    # Build and compile the Inception model
    base_model = InceptionV3(weights='imagenet', include_top=False)

    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(128, activation='relu')(x)
    predictions = Dense(1, activation='sigmoid')(x)

    model = Model(inputs=base_model.input, outputs=predictions)

    model.compile(optimizer=optimizer,
                  loss='binary_crossentropy',
                  metrics=['accuracy'])

    # Train the model
    epochs = 100

    history = model.fit(
        train_generator,
        steps_per_epoch=len(train_generator),
        epochs=epochs,
        validation_data=test_generator,
        validation_steps=len(test_generator)
    )

    # Evaluate the model on test data
    test_loss, test_accuracy = model.evaluate(test_generator)
    print(f"Test loss: {test_loss:.4f}")
    print(f"Test accuracy: {test_accuracy:.4f}")

    # Evaluate the model on train data
    train_loss, train_accuracy = model.evaluate(train_generator)
    print(f"Train loss: {train_loss:.4f}")
    print(f"Train accuracy: {train_accuracy:.4f}")

    # Save the trained model for future use
    model.save(f'D:\ishita\models\inception_model_batch{batch_size}_optimizer_{optimizer}.h5')

# Specify a range of batch sizes and optimizers
batch_sizes = [16, 32, 64]
optimizers = ['adam', 'sgd', 'rmsprop','adagrade','adadelta','nag']

# Track the best accuracy and corresponding parameters
best_accuracy = 0.0
best_batch_size = 0
best_optimizer = ''

# Iterate through batch sizes and optimizers
for batch_size in batch_sizes:
    for optimizer in optimizers:
        print(f"Training with batch size {batch_size} and optimizer {optimizer}")
        train_model(batch_size, optimizer)
        
        # Update best accuracy and parameters if necessary
        if test_accuracy > best_accuracy:
            best_accuracy = test_accuracy
            best_batch_size = batch_size
            best_optimizer = optimizer

print(f"Best accuracy: {best_accuracy:.4f}")
print(f"Best batch size: {best_batch_size}")
print(f"Best optimizer: {best_optimizer}")



import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# Data preprocessing (no rescaling or data augmentation)
train_datagen = ImageDataGenerator()
test_datagen = ImageDataGenerator()

batch_size = 16

train_generator = train_datagen.flow_from_directory(
    r'D:\ishita\building_data\train',
    target_size=(150, 150),  # Inception model input size
    batch_size=batch_size,
    class_mode='binary'  # For binary classification
)

test_generator = test_datagen.flow_from_directory(
    r'D:\ishita\building_data\test',
    target_size=(150, 150),
    batch_size=batch_size,
    class_mode='binary'
)

# Build and compile the Inception model
base_model = InceptionV3(weights='imagenet', include_top=False)

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
epochs = 100

history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    epochs=epochs,
    validation_data=test_generator,
    validation_steps=len(test_generator)
)

# Evaluate the model on test data
test_loss, test_accuracy = model.evaluate(test_generator)
print(f"Test loss: {test_loss:.4f}")
print(f"Test accuracy: {test_accuracy:.4f}")

# Evaluate the model on train data
train_loss, train_accuracy = model.evaluate(train_generator)
print(f"Train loss: {train_loss:.4f}")
print(f"Train accuracy: {train_accuracy:.4f}")

# Save the trained model for future use
model.save(r'D:\ishita\models\inception_model_299_adam_16.h5')
